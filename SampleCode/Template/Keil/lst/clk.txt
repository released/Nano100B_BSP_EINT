; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\clk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 --omf_browse=.\obj\clk.crf ..\..\..\Library\StdDriver\src\clk.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  4802              LDR      r0,|L1.12|
;;;32     {
;;;33         /* Disable CKO0 clock source */
;;;34         CLK->APBCLK &= (~CLK_APBCLK_FDIV_EN_Msk);
000002  6881              LDR      r1,[r0,#8]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L1.12|
                          DCD      0x50000200

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  CLK_EnableCKO PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  2210              MOVS     r2,#0x10
;;;32     {
;;;33         /* Disable CKO0 clock source */
;;;34         CLK->APBCLK &= (~CLK_APBCLK_FDIV_EN_Msk);
000002  4311              ORRS     r1,r1,r2
000004  4a05              LDR      r2,|L2.28|
000006  6291              STR      r1,[r2,#0x28]
000008  6891              LDR      r1,[r2,#8]
;;;35     }
00000a  2340              MOVS     r3,#0x40
00000c  4319              ORRS     r1,r1,r3
00000e  6091              STR      r1,[r2,#8]
000010  6991              LDR      r1,[r2,#0x18]
000012  230c              MOVS     r3,#0xc
000014  4399              BICS     r1,r1,r3
000016  4301              ORRS     r1,r1,r0
000018  6191              STR      r1,[r2,#0x18]
00001a  4770              BX       lr
;;;36     
                          ENDP

                  |L2.28|
                          DCD      0x50000200

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  CLK_PowerDown PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  4904              LDR      r1,|L3.20|
;;;32     {
;;;33         /* Disable CKO0 clock source */
;;;34         CLK->APBCLK &= (~CLK_APBCLK_FDIV_EN_Msk);
000002  2004              MOVS     r0,#4
000004  6108              STR      r0,[r1,#0x10]
000006  4804              LDR      r0,|L3.24|
000008  6801              LDR      r1,[r0,#0]
;;;35     }
00000a  2250              MOVS     r2,#0x50
00000c  4311              ORRS     r1,r1,r2
00000e  6001              STR      r1,[r0,#0]
000010  bf30              WFI      
000012  4770              BX       lr
;;;36     
                          ENDP

                  |L3.20|
                          DCD      0xe000ed00
                  |L3.24|
                          DCD      0x50000200

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  CLK_Idle PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  4803              LDR      r0,|L4.16|
;;;32     {
;;;33         /* Disable CKO0 clock source */
;;;34         CLK->APBCLK &= (~CLK_APBCLK_FDIV_EN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;35     }
00000a  bf30              WFI      
00000c  4770              BX       lr
;;;36     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x50000200

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  CLK_GetHXTFreq PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  4897              LDR      r0,|L5.608|
;;;32     {
;;;33         /* Disable CKO0 clock source */
;;;34         CLK->APBCLK &= (~CLK_APBCLK_FDIV_EN_Msk);
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d000              BEQ      |L5.10|
000008  4896              LDR      r0,|L5.612|
                  |L5.10|
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  CLK_GetLXTFreq PROC
;;;53       */
;;;54     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
;;;55     {
;;;56         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;57         CLK->FRQDIV = CLK_FRQDIV_FDIV_EN_Msk | u32ClkDiv ;
;;;58     
;;;59         /* Enable CKO clock source */
;;;60         CLK->APBCLK |= CLK_APBCLK_FDIV_EN_Msk;
00000c  4894              LDR      r0,|L5.608|
00000e  6800              LDR      r0,[r0,#0]
;;;61     
;;;62         /* Select CKO clock source */
;;;63         CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_FRQDIV_S_Msk)) | u32ClkSrc;
000010  0780              LSLS     r0,r0,#30
000012  d502              BPL      |L5.26|
000014  2001              MOVS     r0,#1
000016  03c0              LSLS     r0,r0,#15
000018  4770              BX       lr
                  |L5.26|
;;;64     }
00001a  2000              MOVS     r0,#0
00001c  4770              BX       lr
;;;65     
                          ENDP

                  CLK_GetHCLKFreq PROC
;;;117      */
;;;118    uint32_t CLK_GetHCLKFreq(void)
00001e  b510              PUSH     {r4,lr}
;;;119    {
;;;120        SystemCoreClockUpdate();
000020  f7fffffe          BL       SystemCoreClockUpdate
;;;121        return SystemCoreClock;
000024  4890              LDR      r0,|L5.616|
000026  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;122    }
000028  bd10              POP      {r4,pc}
;;;123    
                          ENDP

                  CLK_GetCPUFreq PROC
;;;129      */
;;;130    uint32_t CLK_GetCPUFreq(void)
00002a  b510              PUSH     {r4,lr}
;;;131    {
;;;132        SystemCoreClockUpdate();
00002c  f7fffffe          BL       SystemCoreClockUpdate
;;;133        return SystemCoreClock;
000030  488d              LDR      r0,|L5.616|
000032  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;134    }
000034  bd10              POP      {r4,pc}
;;;135    
                          ENDP

                  CLK_GetPLLClockFreq PROC
;;;140      */
;;;141    uint32_t CLK_GetPLLClockFreq(void)
000036  b510              PUSH     {r4,lr}
;;;142    {
;;;143        uint32_t u32Freq =0, u32PLLSrc;
;;;144        uint32_t u32NO, u32NR, u32IN_DV, u32PllReg;
;;;145    
;;;146        u32PllReg = CLK->PLLCTL;
000038  4889              LDR      r0,|L5.608|
00003a  6a40              LDR      r0,[r0,#0x24]
;;;147    
;;;148        if (u32PllReg & CLK_PLLCTL_PD)
00003c  03c1              LSLS     r1,r0,#15
00003e  d501              BPL      |L5.68|
;;;149            return 0;  /* PLL is in power down mode */
000040  2000              MOVS     r0,#0
;;;150    
;;;151        if (u32PllReg & CLK_PLLCTL_PLL_SRC_Msk)
;;;152            u32PLLSrc = __HIRC12M;
;;;153        else
;;;154            u32PLLSrc = __HXT;
;;;155    
;;;156        u32NO = (u32PllReg & CLK_PLLCTL_OUT_DV) ? 2: 1;
;;;157    
;;;158        u32IN_DV = (u32PllReg & CLK_PLLCTL_IN_DV_Msk) >> 8;
;;;159        if (u32IN_DV == 0)
;;;160            u32NR = 2;
;;;161        else if (u32IN_DV == 1)
;;;162            u32NR = 4;
;;;163        else if (u32IN_DV == 2)
;;;164            u32NR = 8;
;;;165        else
;;;166            u32NR = 16;
;;;167        u32Freq = u32PLLSrc * ((u32PllReg & CLK_PLLCTL_FB_DV_Msk) +32) / u32NR / u32NO;
;;;168        return u32Freq;
;;;169    }
000042  bd10              POP      {r4,pc}
                  |L5.68|
000044  04c1              LSLS     r1,r0,#19             ;156
000046  d501              BPL      |L5.76|
000048  2402              MOVS     r4,#2                 ;156
00004a  e000              B        |L5.78|
                  |L5.76|
00004c  2401              MOVS     r4,#1                 ;156
                  |L5.78|
00004e  0581              LSLS     r1,r0,#22             ;158
000050  0f89              LSRS     r1,r1,#30             ;158
000052  d00f              BEQ      |L5.116|
000054  2901              CMP      r1,#1                 ;161
000056  d00f              BEQ      |L5.120|
000058  2902              CMP      r1,#2                 ;163
00005a  d00f              BEQ      |L5.124|
00005c  2110              MOVS     r1,#0x10              ;166
                  |L5.94|
00005e  0680              LSLS     r0,r0,#26             ;167
000060  0e80              LSRS     r0,r0,#26             ;167
000062  4a80              LDR      r2,|L5.612|
000064  3020              ADDS     r0,r0,#0x20           ;167
000066  4350              MULS     r0,r2,r0              ;167
000068  f7fffffe          BL       __aeabi_uidivmod
00006c  4621              MOV      r1,r4                 ;167
00006e  f7fffffe          BL       __aeabi_uidivmod
000072  bd10              POP      {r4,pc}
                  |L5.116|
000074  2102              MOVS     r1,#2                 ;160
000076  e7f2              B        |L5.94|
                  |L5.120|
000078  2104              MOVS     r1,#4                 ;162
00007a  e7f0              B        |L5.94|
                  |L5.124|
00007c  2108              MOVS     r1,#8                 ;164
00007e  e7ee              B        |L5.94|
;;;170    
                          ENDP

                  CLK_WaitClockReady PROC
;;;616      */
;;;617    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000080  b510              PUSH     {r4,lr}
;;;618    {
000082  4604              MOV      r4,r0
;;;619        int32_t i32TimeOutCnt;
;;;620    
;;;621        i32TimeOutCnt = __HSI / 200; /* About 5ms */
000084  4979              LDR      r1,|L5.620|
;;;622    
;;;623        while((CLK->CLKSTATUS & u32ClkMask) != u32ClkMask)
000086  4b76              LDR      r3,|L5.608|
000088  e005              B        |L5.150|
                  |L5.138|
;;;624        {
;;;625            if(i32TimeOutCnt-- <= 0)
00008a  460a              MOV      r2,r1
00008c  1e49              SUBS     r1,r1,#1
00008e  2a00              CMP      r2,#0
000090  dc01              BGT      |L5.150|
;;;626                return 0;
000092  2000              MOVS     r0,#0
;;;627        }
;;;628        return 1;
;;;629    }
000094  bd10              POP      {r4,pc}
                  |L5.150|
000096  68da              LDR      r2,[r3,#0xc]          ;623
000098  4620              MOV      r0,r4                 ;623
00009a  4390              BICS     r0,r0,r2              ;623
00009c  d1f5              BNE      |L5.138|
00009e  2001              MOVS     r0,#1                 ;628
0000a0  bd10              POP      {r4,pc}
;;;630    
                          ENDP

                  CLK_SetHCLK PROC
;;;221      */
;;;222    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
0000a2  b5f8              PUSH     {r3-r7,lr}
;;;223    {
;;;224        uint32_t u32HIRCSTB;
;;;225    
;;;226        /* Read HIRC clock source stable flag */
;;;227        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_HIRC_STB_Msk;
0000a4  4c6e              LDR      r4,|L5.608|
0000a6  460f              MOV      r7,r1                 ;223
0000a8  68e5              LDR      r5,[r4,#0xc]
0000aa  4684              MOV      r12,r0                ;223
0000ac  2610              MOVS     r6,#0x10
;;;228    
;;;229        /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;230        CLK->PWRCTL |= CLK_PWRCTL_HIRC_EN_Msk;
0000ae  6820              LDR      r0,[r4,#0]
0000b0  4035              ANDS     r5,r5,r6              ;227
0000b2  2104              MOVS     r1,#4
0000b4  4308              ORRS     r0,r0,r1
0000b6  6020              STR      r0,[r4,#0]
;;;231        CLK_WaitClockReady(CLK_CLKSTATUS_HIRC_STB_Msk);
0000b8  4630              MOV      r0,r6
0000ba  f7fffffe          BL       CLK_WaitClockReady
;;;232        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
0000be  6920              LDR      r0,[r4,#0x10]
0000c0  2107              MOVS     r1,#7
0000c2  4308              ORRS     r0,r0,r1
0000c4  6120              STR      r0,[r4,#0x10]
;;;233    
;;;234        CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLK_N_Msk) | u32ClkDiv;
0000c6  69e0              LDR      r0,[r4,#0x1c]
0000c8  0900              LSRS     r0,r0,#4
0000ca  0100              LSLS     r0,r0,#4
0000cc  4338              ORRS     r0,r0,r7
0000ce  61e0              STR      r0,[r4,#0x1c]
;;;235        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_S_Msk) | u32ClkSrc;
0000d0  6920              LDR      r0,[r4,#0x10]
0000d2  4388              BICS     r0,r0,r1
0000d4  4661              MOV      r1,r12
0000d6  4308              ORRS     r0,r0,r1
0000d8  6120              STR      r0,[r4,#0x10]
;;;236        SystemCoreClockUpdate();
0000da  f7fffffe          BL       SystemCoreClockUpdate
;;;237    
;;;238        /* Disable HIRC if HIRC is disabled before switching HCLK source */
;;;239        if(u32HIRCSTB == 0)
0000de  2d00              CMP      r5,#0
0000e0  d102              BNE      |L5.232|
;;;240            CLK->PWRCTL &= ~CLK_CLKSTATUS_HIRC_STB_Msk;
0000e2  6820              LDR      r0,[r4,#0]
0000e4  43b0              BICS     r0,r0,r6
0000e6  6020              STR      r0,[r4,#0]
                  |L5.232|
;;;241    }
0000e8  bdf8              POP      {r3-r7,pc}
;;;242    
                          ENDP

                  CLK_EnablePLL PROC
;;;489      */
;;;490    uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
0000ea  b57f              PUSH     {r0-r6,lr}
;;;491    {
;;;492        uint32_t u32ClkSrc,u32NR, u32NF,u32Register;
;;;493        uint32_t u32NRTable[4]= {2,4,8,16};
0000ec  4a60              LDR      r2,|L5.624|
0000ee  460b              MOV      r3,r1                 ;491
0000f0  ca36              LDM      r2,{r1,r2,r4,r5}
0000f2  466e              MOV      r6,sp
0000f4  c636              STM      r6!,{r1,r2,r4,r5}
;;;494        int32_t i32NRVal;
;;;495        if ( u32PllFreq < FREQ_48MHZ)
0000f6  495f              LDR      r1,|L5.628|
0000f8  428b              CMP      r3,r1
0000fa  d302              BCC      |L5.258|
;;;496            u32PllFreq=FREQ_48MHZ;
;;;497        else if(u32PllFreq > FREQ_120MHZ)
0000fc  495e              LDR      r1,|L5.632|
0000fe  428b              CMP      r3,r1
000100  d900              BLS      |L5.260|
                  |L5.258|
;;;498            u32PllFreq=FREQ_120MHZ;
000102  460b              MOV      r3,r1
                  |L5.260|
;;;499    
;;;500        if(u32PllClkSrc!=CLK_PLLCTL_PLL_SRC_HIRC)
000104  2401              MOVS     r4,#1
000106  0464              LSLS     r4,r4,#17
000108  42a0              CMP      r0,r4
00010a  d000              BEQ      |L5.270|
;;;501        {
;;;502            /* PLL source clock from HXT */
;;;503            u32Register = (0x0UL<<CLK_PLLCTL_PLL_SRC_Pos);
00010c  2400              MOVS     r4,#0
                  |L5.270|
;;;504            u32ClkSrc = __HXT;
;;;505        }
;;;506        else
;;;507        {
;;;508            /* PLL source clock from HIRC */
;;;509            u32Register = (0x1UL<<CLK_PLLCTL_PLL_SRC_Pos);
;;;510            u32ClkSrc =__HIRC12M;
;;;511        }
;;;512    
;;;513        u32NF = u32PllFreq / 1000000;
00010e  495b              LDR      r1,|L5.636|
000110  4618              MOV      r0,r3
000112  f7fffffe          BL       __aeabi_uidivmod
;;;514        u32NR = u32ClkSrc / 1000000;
;;;515        if(u32ClkSrc%12==0)
;;;516        {
;;;517            u32NF=(u32NF/3)*4;
000116  2103              MOVS     r1,#3
000118  f7fffffe          BL       __aeabi_uidivmod
00011c  0082              LSLS     r2,r0,#2
;;;518            u32NR=(u32NR/3)*4;
00011e  2010              MOVS     r0,#0x10
000120  e003              B        |L5.298|
                  |L5.290|
;;;519        }
;;;520    
;;;521        while( u32NR>16 || u32NF>(0x3F+32) )
;;;522        {
;;;523            u32NR = u32NR>>1;
000122  0840              LSRS     r0,r0,#1
;;;524            u32NF = u32NF>>1;
000124  0852              LSRS     r2,r2,#1
000126  2810              CMP      r0,#0x10              ;521
000128  d8fb              BHI      |L5.290|
                  |L5.298|
00012a  2a5f              CMP      r2,#0x5f              ;521
00012c  d8f9              BHI      |L5.290|
;;;525        }
;;;526    
;;;527        for(i32NRVal=3; i32NRVal>=0; i32NRVal--)
00012e  2103              MOVS     r1,#3
000130  466b              MOV      r3,sp                 ;493
                  |L5.306|
;;;528            if(u32NR==u32NRTable[i32NRVal]) break;
000132  008d              LSLS     r5,r1,#2
000134  595d              LDR      r5,[r3,r5]
000136  4285              CMP      r5,r0
000138  d001              BEQ      |L5.318|
00013a  1e49              SUBS     r1,r1,#1
00013c  d5f9              BPL      |L5.306|
                  |L5.318|
;;;529    
;;;530        CLK->PLLCTL = u32Register | (i32NRVal<<8) | (u32NF - 32) ;
00013e  0209              LSLS     r1,r1,#8
000140  4321              ORRS     r1,r1,r4
000142  3a20              SUBS     r2,r2,#0x20
000144  4846              LDR      r0,|L5.608|
000146  4311              ORRS     r1,r1,r2
000148  6241              STR      r1,[r0,#0x24]
;;;531    
;;;532        CLK->PLLCTL &= ~CLK_PLLCTL_PD_Msk;
00014a  6a41              LDR      r1,[r0,#0x24]
00014c  01c2              LSLS     r2,r0,#7
00014e  4391              BICS     r1,r1,r2
000150  6241              STR      r1,[r0,#0x24]
;;;533    
;;;534        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
000152  2004              MOVS     r0,#4
000154  f7fffffe          BL       CLK_WaitClockReady
;;;535    
;;;536        return CLK_GetPLLClockFreq();
000158  f7fffffe          BL       CLK_GetPLLClockFreq
;;;537    
;;;538    }
00015c  b004              ADD      sp,sp,#0x10
00015e  bd70              POP      {r4-r6,pc}
;;;539    
                          ENDP

                  CLK_EnableXtalRC PROC
;;;367      */
;;;368    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000160  b510              PUSH     {r4,lr}
;;;369    {
000162  4604              MOV      r4,r0
;;;370        CLK->PWRCTL |= u32ClkMask;
000164  483e              LDR      r0,|L5.608|
000166  6801              LDR      r1,[r0,#0]
000168  4321              ORRS     r1,r1,r4
00016a  6001              STR      r1,[r0,#0]
;;;371        if(u32ClkMask & CLK_PWRCTL_HXT_EN_Msk)
00016c  07e0              LSLS     r0,r4,#31
00016e  d002              BEQ      |L5.374|
;;;372            CLK_WaitClockReady(CLK_CLKSTATUS_HXT_STB_Msk);
000170  2001              MOVS     r0,#1
000172  f7fffffe          BL       CLK_WaitClockReady
                  |L5.374|
;;;373    
;;;374        if(u32ClkMask & CLK_PWRCTL_LXT_EN_Msk)
000176  07a0              LSLS     r0,r4,#30
000178  d502              BPL      |L5.384|
;;;375            CLK_WaitClockReady(CLK_CLKSTATUS_LXT_STB_Msk);
00017a  2002              MOVS     r0,#2
00017c  f7fffffe          BL       CLK_WaitClockReady
                  |L5.384|
;;;376    
;;;377        if(u32ClkMask & CLK_PWRCTL_HIRC_EN_Msk)
000180  0760              LSLS     r0,r4,#29
000182  d502              BPL      |L5.394|
;;;378            CLK_WaitClockReady(CLK_CLKSTATUS_HIRC_STB_Msk);
000184  2010              MOVS     r0,#0x10
000186  f7fffffe          BL       CLK_WaitClockReady
                  |L5.394|
;;;379    
;;;380        if(u32ClkMask & CLK_PWRCTL_LIRC_EN_Msk)
00018a  0720              LSLS     r0,r4,#28
00018c  d502              BPL      |L5.404|
;;;381            CLK_WaitClockReady(CLK_CLKSTATUS_LIRC_STB_Msk);
00018e  2008              MOVS     r0,#8
000190  f7fffffe          BL       CLK_WaitClockReady
                  |L5.404|
;;;382    }
000194  bd10              POP      {r4,pc}
;;;383    
                          ENDP

                  CLK_SetCoreClock PROC
;;;175      */
;;;176    uint32_t CLK_SetCoreClock(uint32_t u32Hclk)
000196  b5f8              PUSH     {r3-r7,lr}
;;;177    {
;;;178        uint32_t u32HIRCSTB;
;;;179        /* Read HIRC clock source stable flag */
;;;180        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_HIRC_STB_Msk;
000198  4d31              LDR      r5,|L5.608|
00019a  68ec              LDR      r4,[r5,#0xc]
00019c  2610              MOVS     r6,#0x10
;;;181    
;;;182        if(u32Hclk==__HIRC12M)
00019e  4931              LDR      r1,|L5.612|
0001a0  4034              ANDS     r4,r4,r6              ;180
;;;183        {
;;;184            CLK_EnableXtalRC(CLK_PWRCTL_HIRC_EN_Msk);
;;;185            CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HIRC,CLK_HCLK_CLK_DIVIDER(1));
;;;186            return SystemCoreClock;
0001a2  4f31              LDR      r7,|L5.616|
0001a4  4288              CMP      r0,r1                 ;182
0001a6  d107              BNE      |L5.440|
0001a8  2004              MOVS     r0,#4                 ;184
0001aa  f7fffffe          BL       CLK_EnableXtalRC
0001ae  2100              MOVS     r1,#0                 ;185
0001b0  2007              MOVS     r0,#7                 ;185
0001b2  f7fffffe          BL       CLK_SetHCLK
0001b6  e01f              B        |L5.504|
                  |L5.440|
;;;187        }
;;;188    
;;;189        if(u32Hclk<FREQ_24MHZ) u32Hclk=FREQ_24MHZ;
0001b8  4931              LDR      r1,|L5.640|
0001ba  4288              CMP      r0,r1
0001bc  d302              BCC      |L5.452|
;;;190        if(u32Hclk>FREQ_42MHZ) u32Hclk=FREQ_42MHZ;
0001be  4931              LDR      r1,|L5.644|
0001c0  4288              CMP      r0,r1
0001c2  d900              BLS      |L5.454|
                  |L5.452|
0001c4  4608              MOV      r0,r1                 ;189
                  |L5.454|
;;;191    
;;;192        if(CLK->PWRCTL & CLK_PWRCTL_HXT_EN)
0001c6  6829              LDR      r1,[r5,#0]
0001c8  07c9              LSLS     r1,r1,#31
0001ca  d004              BEQ      |L5.470|
;;;193            CLK_EnablePLL(CLK_PLLCTL_PLL_SRC_HXT,u32Hclk*2);
0001cc  0041              LSLS     r1,r0,#1
0001ce  2000              MOVS     r0,#0
0001d0  f7fffffe          BL       CLK_EnablePLL
0001d4  e006              B        |L5.484|
                  |L5.470|
;;;194        else
;;;195        {
;;;196            CLK_EnablePLL(CLK_PLLCTL_PLL_SRC_HIRC,u32Hclk*2);
0001d6  0041              LSLS     r1,r0,#1
0001d8  2001              MOVS     r0,#1
0001da  0440              LSLS     r0,r0,#17
0001dc  f7fffffe          BL       CLK_EnablePLL
;;;197    
;;;198            /* Read HIRC clock source stable flag */
;;;199            u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_HIRC_STB_Msk;
0001e0  68ec              LDR      r4,[r5,#0xc]
0001e2  4034              ANDS     r4,r4,r6
                  |L5.484|
;;;200        }
;;;201        CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_PLL,CLK_HCLK_CLK_DIVIDER(2));
0001e4  2101              MOVS     r1,#1
0001e6  2002              MOVS     r0,#2
0001e8  f7fffffe          BL       CLK_SetHCLK
;;;202    
;;;203        /* Disable HIRC if HIRC is disabled before setting core clock */
;;;204        if(u32HIRCSTB == 0)
0001ec  2c00              CMP      r4,#0
0001ee  d103              BNE      |L5.504|
;;;205            CLK->PWRCTL &= ~CLK_PWRCTL_HIRC_EN_Msk;
0001f0  6828              LDR      r0,[r5,#0]
0001f2  2104              MOVS     r1,#4
0001f4  4388              BICS     r0,r0,r1
0001f6  6028              STR      r0,[r5,#0]
                  |L5.504|
;;;206    
;;;207        return SystemCoreClock;
0001f8  6838              LDR      r0,[r7,#0]  ; SystemCoreClock
;;;208    }
0001fa  bdf8              POP      {r3-r7,pc}
;;;209    
                          ENDP

                  CLK_SetModuleClock PROC
;;;337    
;;;338    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
0001fc  b570              PUSH     {r4-r6,lr}
;;;339    {
;;;340        uint32_t u32tmp=0,u32sel=0,u32div=0;
;;;341    
;;;342        if(MODULE_CLKDIV_Msk(u32ModuleIdx)!=MODULE_NoMsk)
0001fe  0a84              LSRS     r4,r0,#10
000200  0623              LSLS     r3,r4,#24
000202  0e1b              LSRS     r3,r3,#24
000204  d00d              BEQ      |L5.546|
;;;343        {
;;;344            u32div =(uint32_t)&CLK->CLKDIV0+((MODULE_CLKDIV(u32ModuleIdx))*4);
000206  0303              LSLS     r3,r0,#12
000208  4d15              LDR      r5,|L5.608|
00020a  0f9b              LSRS     r3,r3,#30
00020c  009b              LSLS     r3,r3,#2
00020e  351c              ADDS     r5,r5,#0x1c
000210  195b              ADDS     r3,r3,r5
;;;345            u32tmp = *(volatile uint32_t *)(u32div);
000212  681d              LDR      r5,[r3,#0]
;;;346            u32tmp = ( u32tmp & ~(MODULE_CLKDIV_Msk(u32ModuleIdx)<<MODULE_CLKDIV_Pos(u32ModuleIdx)) ) | u32ClkDiv;
000214  0586              LSLS     r6,r0,#22
000216  b2e4              UXTB     r4,r4
000218  0ef6              LSRS     r6,r6,#27
00021a  40b4              LSLS     r4,r4,r6
00021c  43a5              BICS     r5,r5,r4
00021e  4315              ORRS     r5,r5,r2
;;;347            *(volatile uint32_t *)(u32div) = u32tmp;
000220  601d              STR      r5,[r3,#0]
                  |L5.546|
;;;348        }
;;;349    
;;;350        if(MODULE_CLKSEL_Msk(u32ModuleIdx)!=MODULE_NoMsk)
000222  0e42              LSRS     r2,r0,#25
000224  0712              LSLS     r2,r2,#28
000226  d00e              BEQ      |L5.582|
;;;351        {
;;;352            u32sel = (uint32_t)&CLK->CLKSEL0+((MODULE_CLKSEL(u32ModuleIdx))*4);
000228  0042              LSLS     r2,r0,#1
00022a  4b0d              LDR      r3,|L5.608|
00022c  0f92              LSRS     r2,r2,#30
00022e  0092              LSLS     r2,r2,#2
000230  3310              ADDS     r3,r3,#0x10
000232  18d2              ADDS     r2,r2,r3
;;;353            u32tmp = *(volatile uint32_t *)(u32sel);
000234  6813              LDR      r3,[r2,#0]
;;;354            u32tmp = ( u32tmp & ~(MODULE_CLKSEL_Msk(u32ModuleIdx)<<MODULE_CLKSEL_Pos(u32ModuleIdx)) ) | u32ClkSrc;
000236  00c4              LSLS     r4,r0,#3
000238  0f24              LSRS     r4,r4,#28
00023a  01c0              LSLS     r0,r0,#7
00023c  0ec0              LSRS     r0,r0,#27
00023e  4084              LSLS     r4,r4,r0
000240  43a3              BICS     r3,r3,r4
000242  430b              ORRS     r3,r3,r1
;;;355            *(volatile uint32_t *)(u32sel) = u32tmp;
000244  6013              STR      r3,[r2,#0]
                  |L5.582|
;;;356        }
;;;357    }
000246  bd70              POP      {r4-r6,pc}
;;;358    
                          ENDP

                  CLK_EnableModuleClock PROC
;;;434      */
;;;435    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000248  0fc1              LSRS     r1,r0,#31
;;;436    {
;;;437        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  |= 1<<MODULE_IP_EN_Pos(u32ModuleIdx);
00024a  008a              LSLS     r2,r1,#2
00024c  4904              LDR      r1,|L5.608|
00024e  1851              ADDS     r1,r2,r1
000250  684a              LDR      r2,[r1,#4]
000252  06c3              LSLS     r3,r0,#27
000254  0edb              LSRS     r3,r3,#27
000256  2001              MOVS     r0,#1
000258  4098              LSLS     r0,r0,r3
00025a  4302              ORRS     r2,r2,r0
00025c  604a              STR      r2,[r1,#4]
;;;438    }
00025e  4770              BX       lr
;;;439    
                          ENDP

                  |L5.608|
                          DCD      0x50000200
                  |L5.612|
                          DCD      0x00b71b00
                  |L5.616|
                          DCD      SystemCoreClock
                  |L5.620|
                          DCD      0x0000ea60
                  |L5.624|
                          DCD      ||.constdata||
                  |L5.628|
                          DCD      0x02dc6c00
                  |L5.632|
                          DCD      0x07270e00
                  |L5.636|
                          DCD      0x000f4240
                  |L5.640|
                          DCD      0x016e3600
                  |L5.644|
                          DCD      0x0280de80

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  CLK_DisableXtalRC PROC
;;;476      */
;;;477    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  4902              LDR      r1,|L6.12|
;;;478    {
;;;479        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
000008  4770              BX       lr
;;;480    }
;;;481    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x50000200

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  CLK_DisableModuleClock PROC
;;;476      */
;;;477    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  0fc1              LSRS     r1,r0,#31
;;;478    {
;;;479        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  008a              LSLS     r2,r1,#2
000004  4904              LDR      r1,|L7.24|
000006  1851              ADDS     r1,r2,r1
000008  684a              LDR      r2,[r1,#4]
00000a  06c3              LSLS     r3,r0,#27
00000c  0edb              LSRS     r3,r3,#27
00000e  2001              MOVS     r0,#1
000010  4098              LSLS     r0,r0,r3
000012  4382              BICS     r2,r2,r0
000014  604a              STR      r2,[r1,#4]
;;;480    }
000016  4770              BX       lr
;;;481    
                          ENDP

                  |L7.24|
                          DCD      0x50000200

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  CLK_DisablePLL PROC
;;;476      */
;;;477    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  4802              LDR      r0,|L8.12|
;;;478    {
;;;479        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  6a41              LDR      r1,[r0,#0x24]
000004  01c2              LSLS     r2,r0,#7
000006  4311              ORRS     r1,r1,r2
000008  6241              STR      r1,[r0,#0x24]
00000a  4770              BX       lr
;;;480    }
;;;481    
                          ENDP

                  |L8.12|
                          DCD      0x50000200

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  CLK_SysTickDelay PROC
;;;476      */
;;;477    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  4906              LDR      r1,|L9.28|
;;;478    {
;;;479        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L9.32|
000008  6148              STR      r0,[r1,#0x14]
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L9.18|
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
;;;480    }
000016  d5fc              BPL      |L9.18|
000018  610a              STR      r2,[r1,#0x10]
00001a  4770              BX       lr
;;;481    
                          ENDP

                  |L9.28|
                          DCD      CyclesPerUs
                  |L9.32|
                          DCD      0xe000e000

                          AREA ||area_number.10||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.text||
                  CLK_EnableSysTick PROC
;;;476      */
;;;477    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  b510              PUSH     {r4,lr}
;;;478    {
;;;479        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  4a09              LDR      r2,|L10.40|
000004  2300              MOVS     r3,#0
000006  6113              STR      r3,[r2,#0x10]
000008  2404              MOVS     r4,#4
00000a  2801              CMP      r0,#1
00000c  6910              LDR      r0,[r2,#0x10]
00000e  d008              BEQ      |L10.34|
000010  43a0              BICS     r0,r0,r4
                  |L10.18|
000012  6110              STR      r0,[r2,#0x10]
000014  6151              STR      r1,[r2,#0x14]
;;;480    }
000016  6193              STR      r3,[r2,#0x18]
000018  6910              LDR      r0,[r2,#0x10]
00001a  2101              MOVS     r1,#1
00001c  4308              ORRS     r0,r0,r1
00001e  6110              STR      r0,[r2,#0x10]
000020  bd10              POP      {r4,pc}
                  |L10.34|
000022  4320              ORRS     r0,r0,r4
000024  e7f5              B        |L10.18|
;;;481    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      0xe000e000

                          AREA ||area_number.11||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.text||
                  CLK_DisableSysTick PROC
;;;476      */
;;;477    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  4901              LDR      r1,|L11.8|
;;;478    {
;;;479        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_APBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
000006  4770              BX       lr
;;;480    }
;;;481    
                          ENDP

                  |L11.8|
                          DCD      0xe000e000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\clk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 402
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
