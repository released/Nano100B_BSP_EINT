; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 --omf_browse=.\obj\uart.crf ..\..\..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  UART_ClearIntFlag PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  074a              LSLS     r2,r1,#29
;;;41     {
000002  d507              BPL      |L1.20|
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  6982              LDR      r2,[r0,#0x18]
000006  2370              MOVS     r3,#0x70
000008  431a              ORRS     r2,r2,r3
00000a  6182              STR      r2,[r0,#0x18]
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  6942              LDR      r2,[r0,#0x14]
00000e  2301              MOVS     r3,#1
000010  431a              ORRS     r2,r2,r3
000012  6142              STR      r2,[r0,#0x14]
                  |L1.20|
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  070a              LSLS     r2,r1,#28
000016  d504              BPL      |L1.34|
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  2301              MOVS     r3,#1
00001c  049b              LSLS     r3,r3,#18
00001e  431a              ORRS     r2,r2,r3
000020  61c2              STR      r2,[r0,#0x1c]
                  |L1.34|
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
000022  068a              LSLS     r2,r1,#26
000024  d504              BPL      |L1.48|
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
000026  6982              LDR      r2,[r0,#0x18]
000028  23ff              MOVS     r3,#0xff
00002a  3302              ADDS     r3,#2
00002c  431a              ORRS     r2,r2,r3
00002e  6182              STR      r2,[r0,#0x18]
                  |L1.48|
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
000030  064a              LSLS     r2,r1,#25
000032  d503              BPL      |L1.60|
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
000034  6902              LDR      r2,[r0,#0x10]
000036  2340              MOVS     r3,#0x40
000038  431a              ORRS     r2,r2,r3
00003a  6102              STR      r2,[r0,#0x10]
                  |L1.60|
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
00003c  060a              LSLS     r2,r1,#24
00003e  d503              BPL      |L1.72|
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
000040  6942              LDR      r2,[r0,#0x14]
000042  2306              MOVS     r3,#6
000044  431a              ORRS     r2,r2,r3
000046  6142              STR      r2,[r0,#0x14]
                  |L1.72|
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
000048  05c9              LSLS     r1,r1,#23
00004a  d503              BPL      |L1.84|
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
00004c  6941              LDR      r1,[r0,#0x14]
00004e  2238              MOVS     r2,#0x38
000050  4311              ORRS     r1,r1,r2
000052  6141              STR      r1,[r0,#0x14]
                  |L1.84|
;;;70         }
;;;71     
;;;72     }
000054  4770              BX       lr
;;;73     
                          ENDP


                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  UART_Close PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  2100              MOVS     r1,#0
;;;41     {
000002  60c1              STR      r1,[r0,#0xc]
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  4770              BX       lr
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  UART_DisableFlowCtrl PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6841              LDR      r1,[r0,#4]
;;;41     {
000002  2230              MOVS     r2,#0x30
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  4391              BICS     r1,r1,r2
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  UART_DisableInt PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  68c2              LDR      r2,[r0,#0xc]
;;;41     {
000002  438a              BICS     r2,r2,r1
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  60c2              STR      r2,[r0,#0xc]
000006  4770              BX       lr
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  UART_EnableFlowCtrl PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  69c1              LDR      r1,[r0,#0x1c]
;;;41     {
000002  4a04              LDR      r2,|L5.20|
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  4311              ORRS     r1,r1,r2
000006  61c1              STR      r1,[r0,#0x1c]
000008  6841              LDR      r1,[r0,#4]
00000a  2230              MOVS     r2,#0x30
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  4311              ORRS     r1,r1,r2
00000e  6041              STR      r1,[r0,#4]
000010  4770              BX       lr
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x00010001

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  UART_EnableInt PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  68c2              LDR      r2,[r0,#0xc]
;;;41     {
000002  430a              ORRS     r2,r2,r1
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  60c2              STR      r2,[r0,#0xc]
000006  4770              BX       lr
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  UART_Open PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b57f              PUSH     {r0-r6,lr}
;;;41     {
000002  4a19              LDR      r2,|L7.104|
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
000008  ca0f              LDM      r2,{r0-r3}
00000a  466d              MOV      r5,sp
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  c50f              STM      r5!,{r0-r3}
00000e  4917              LDR      r1,|L7.108|
000010  6948              LDR      r0,[r1,#0x14]
000012  466a              MOV      r2,sp
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  0780              LSLS     r0,r0,#30
000016  0f00              LSRS     r0,r0,#28
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  5810              LDR      r0,[r2,r0]
00001a  69c9              LDR      r1,[r1,#0x1c]
00001c  0509              LSLS     r1,r1,#20
00001e  0f0d              LSRS     r5,r1,#28
000020  1c6d              ADDS     r5,r5,#1
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
000022  2800              CMP      r0,#0
000024  d101              BNE      |L7.42|
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
000026  f7fffffe          BL       SysGet_PLLClockFreq
                  |L7.42|
00002a  4629              MOV      r1,r5
00002c  f7fffffe          BL       __aeabi_uidivmod
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
000030  4605              MOV      r5,r0
000032  2000              MOVS     r0,#0
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
000034  63a0              STR      r0,[r4,#0x38]
000036  2003              MOVS     r0,#3
000038  60a0              STR      r0,[r4,#8]
00003a  2e00              CMP      r6,#0
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
00003c  d013              BEQ      |L7.102|
00003e  0870              LSRS     r0,r6,#1
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
000040  1940              ADDS     r0,r0,r5
000042  4631              MOV      r1,r6
000044  f7fffffe          BL       __aeabi_uidivmod
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
000048  4909              LDR      r1,|L7.112|
00004a  1e40              SUBS     r0,r0,#1
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
00004c  4288              CMP      r0,r1
00004e  d909              BLS      |L7.100|
000050  00f0              LSLS     r0,r6,#3
000052  1940              ADDS     r0,r0,r5
;;;70         }
;;;71     
;;;72     }
000054  4631              MOV      r1,r6
000056  f7fffffe          BL       __aeabi_uidivmod
00005a  2101              MOVS     r1,#1
00005c  0900              LSRS     r0,r0,#4
00005e  07c9              LSLS     r1,r1,#31
000060  1e40              SUBS     r0,r0,#1
000062  4308              ORRS     r0,r0,r1
                  |L7.100|
000064  6260              STR      r0,[r4,#0x24]
                  |L7.102|
000066  bd7f              POP      {r0-r6,pc}
;;;73     
                          ENDP

                  |L7.104|
                          DCD      ||.constdata||
                  |L7.108|
                          DCD      0x50000200
                  |L7.112|
                          DCD      0x0000ffff

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.text||
                  UART_Read PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  2000              MOVS     r0,#0
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L8.38|
                  |L8.12|
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  2300              MOVS     r3,#0
00000e  e004              B        |L8.26|
                  |L8.16|
000010  1c5b              ADDS     r3,r3,#1
000012  42ab              CMP      r3,r5
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  d301              BCC      |L8.26|
000016  2000              MOVS     r0,#0
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  bd70              POP      {r4-r6,pc}
                  |L8.26|
00001a  69a6              LDR      r6,[r4,#0x18]
00001c  07b6              LSLS     r6,r6,#30
00001e  d4f7              BMI      |L8.16|
000020  6823              LDR      r3,[r4,#0]
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
000022  540b              STRB     r3,[r1,r0]
000024  1c40              ADDS     r0,r0,#1
                  |L8.38|
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
000026  4290              CMP      r0,r2
000028  d3f0              BCC      |L8.12|
00002a  bd70              POP      {r4-r6,pc}
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  UART_SetLine_Config PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b5ff              PUSH     {r0-r7,lr}
;;;41     {
000002  4b1b              LDR      r3,|L9.112|
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  4616              MOV      r6,r2
000006  460c              MOV      r4,r1
000008  4605              MOV      r5,r0
00000a  cb0f              LDM      r3,{r0-r3}
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  b085              SUB      sp,sp,#0x14
00000e  466f              MOV      r7,sp
000010  c70f              STM      r7!,{r0-r3}
000012  4918              LDR      r1,|L9.116|
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  6948              LDR      r0,[r1,#0x14]
000016  466a              MOV      r2,sp
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  0780              LSLS     r0,r0,#30
00001a  0f00              LSRS     r0,r0,#28
00001c  5810              LDR      r0,[r2,r0]
00001e  69c9              LDR      r1,[r1,#0x1c]
000020  0509              LSLS     r1,r1,#20
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
000022  0f0f              LSRS     r7,r1,#28
000024  1c7f              ADDS     r7,r7,#1
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
000026  2800              CMP      r0,#0
000028  d101              BNE      |L9.46|
00002a  f7fffffe          BL       SysGet_PLLClockFreq
                  |L9.46|
00002e  4639              MOV      r1,r7
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
000030  f7fffffe          BL       __aeabi_uidivmod
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
000034  4607              MOV      r7,r0
000036  2c00              CMP      r4,#0
000038  d013              BEQ      |L9.98|
00003a  0860              LSRS     r0,r4,#1
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
00003c  19c0              ADDS     r0,r0,r7
00003e  4621              MOV      r1,r4
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490c              LDR      r1,|L9.120|
000046  1e40              SUBS     r0,r0,#1
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
000048  4288              CMP      r0,r1
00004a  d909              BLS      |L9.96|
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
00004c  00e0              LSLS     r0,r4,#3
00004e  19c0              ADDS     r0,r0,r7
000050  4621              MOV      r1,r4
000052  f7fffffe          BL       __aeabi_uidivmod
;;;70         }
;;;71     
;;;72     }
000056  2101              MOVS     r1,#1
000058  0900              LSRS     r0,r0,#4
00005a  07c9              LSLS     r1,r1,#31
00005c  1e40              SUBS     r0,r0,#1
00005e  4308              ORRS     r0,r0,r1
                  |L9.96|
000060  6268              STR      r0,[r5,#0x24]
                  |L9.98|
000062  9808              LDR      r0,[sp,#0x20]
000064  4306              ORRS     r6,r6,r0
000066  980e              LDR      r0,[sp,#0x38]
000068  4306              ORRS     r6,r6,r0
00006a  60ae              STR      r6,[r5,#8]
00006c  b009              ADD      sp,sp,#0x24
00006e  bdf0              POP      {r4-r7,pc}
;;;73     
                          ENDP

                  |L9.112|
                          DCD      ||.constdata||+0x10
                  |L9.116|
                          DCD      0x50000200
                  |L9.120|
                          DCD      0x0000ffff

                          AREA ||area_number.10||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.text||
                  UART_SetTimeoutCnt PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6a02              LDR      r2,[r0,#0x20]
;;;41     {
000002  0a52              LSRS     r2,r2,#9
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  0252              LSLS     r2,r2,#9
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
00000a  68c1              LDR      r1,[r0,#0xc]
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  2210              MOVS     r2,#0x10
00000e  4311              ORRS     r1,r1,r2
000010  60c1              STR      r1,[r0,#0xc]
000012  4770              BX       lr
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.11||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.text||
                  UART_SelectIrDAMode PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b5f0              PUSH     {r4-r7,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  481a              LDR      r0,|L11.112|
000006  4615              MOV      r5,r2
000008  460e              MOV      r6,r1
00000a  c80f              LDM      r0,{r0-r3}
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  b085              SUB      sp,sp,#0x14
00000e  466f              MOV      r7,sp
000010  c70f              STM      r7!,{r0-r3}
000012  4918              LDR      r1,|L11.116|
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  6948              LDR      r0,[r1,#0x14]
000016  466a              MOV      r2,sp
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  0780              LSLS     r0,r0,#30
00001a  0f00              LSRS     r0,r0,#28
00001c  5810              LDR      r0,[r2,r0]
00001e  69c9              LDR      r1,[r1,#0x1c]
000020  0509              LSLS     r1,r1,#20
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
000022  0f0f              LSRS     r7,r1,#28
000024  1c7f              ADDS     r7,r7,#1
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
000026  2800              CMP      r0,#0
000028  d101              BNE      |L11.46|
00002a  f7fffffe          BL       SysGet_PLLClockFreq
                  |L11.46|
00002e  4639              MOV      r1,r7
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
000030  f7fffffe          BL       __aeabi_uidivmod
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
000034  00f1              LSLS     r1,r6,#3
000036  1808              ADDS     r0,r1,r0
000038  4631              MOV      r1,r6
00003a  f7fffffe          BL       __aeabi_uidivmod
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
00003e  2101              MOVS     r1,#1
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
000040  0900              LSRS     r0,r0,#4
000042  07c9              LSLS     r1,r1,#31
000044  1e40              SUBS     r0,r0,#1
000046  4308              ORRS     r0,r0,r1
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
000048  6260              STR      r0,[r4,#0x24]
00004a  6b20              LDR      r0,[r4,#0x30]
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
00004c  2120              MOVS     r1,#0x20
00004e  4388              BICS     r0,r0,r1
000050  6320              STR      r0,[r4,#0x30]
000052  6b20              LDR      r0,[r4,#0x30]
;;;70         }
;;;71     
;;;72     }
000054  2140              MOVS     r1,#0x40
000056  4308              ORRS     r0,r0,r1
000058  6320              STR      r0,[r4,#0x30]
00005a  2102              MOVS     r1,#2
00005c  6b20              LDR      r0,[r4,#0x30]
00005e  2d00              CMP      r5,#0
000060  d001              BEQ      |L11.102|
000062  4308              ORRS     r0,r0,r1
000064  e000              B        |L11.104|
                  |L11.102|
000066  4388              BICS     r0,r0,r1
                  |L11.104|
000068  6320              STR      r0,[r4,#0x30]
00006a  63a1              STR      r1,[r4,#0x38]
00006c  b005              ADD      sp,sp,#0x14
00006e  bdf0              POP      {r4-r7,pc}
;;;73     
                          ENDP

                  |L11.112|
                          DCD      ||.constdata||+0x20
                  |L11.116|
                          DCD      0x50000200

                          AREA ||area_number.12||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.text||
                  UART_SelectRS485Mode PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  2303              MOVS     r3,#3
;;;41     {
000002  6383              STR      r3,[r0,#0x38]
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  2300              MOVS     r3,#0
000006  6343              STR      r3,[r0,#0x34]
000008  6b43              LDR      r3,[r0,#0x34]
00000a  0612              LSLS     r2,r2,#24
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  430a              ORRS     r2,r2,r1
00000e  4313              ORRS     r3,r3,r2
000010  6343              STR      r3,[r0,#0x34]
000012  4770              BX       lr
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.13||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.13||, ||.text||
                  UART_SelectLINMode PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  2301              MOVS     r3,#1
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  6383              STR      r3,[r0,#0x38]
000006  6383              STR      r3,[r0,#0x38]
000008  6b43              LDR      r3,[r0,#0x34]
00000a  24c7              MOVS     r4,#0xc7
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  43a3              BICS     r3,r3,r4
00000e  6343              STR      r3,[r0,#0x34]
000010  6b43              LDR      r3,[r0,#0x34]
000012  0752              LSLS     r2,r2,#29
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  0f52              LSRS     r2,r2,#29
000016  4313              ORRS     r3,r3,r2
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  6343              STR      r3,[r0,#0x34]
00001a  6b42              LDR      r2,[r0,#0x34]
00001c  430a              ORRS     r2,r2,r1
00001e  6342              STR      r2,[r0,#0x34]
000020  bd10              POP      {r4,pc}
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||area_number.14||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.text||
                  UART_Write PROC
;;;39      */
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     
;;;43         if(u32InterruptFlag & UART_ISR_RLS_IS_Msk)   /* clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FSR |= UART_FSR_BI_F_Msk | UART_FSR_FE_F_Msk | UART_FSR_PE_F_Msk;
000004  2000              MOVS     r0,#0
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L14.38|
                  |L14.12|
;;;46             uart->TRSR |= UART_TRSR_RS485_ADDET_F_Msk;
00000c  2300              MOVS     r3,#0
00000e  e004              B        |L14.26|
                  |L14.16|
000010  1c5b              ADDS     r3,r3,#1
000012  42ab              CMP      r3,r5
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_MODEM_IS_Msk)  /* clear Modem Interrupt */
000014  d301              BCC      |L14.26|
000016  2000              MOVS     r0,#0
;;;50             uart->MCSR |= UART_MCSR_DCT_F_Msk;
000018  bd70              POP      {r4-r6,pc}
                  |L14.26|
00001a  69a6              LDR      r6,[r4,#0x18]
00001c  05b6              LSLS     r6,r6,#22
00001e  d5f7              BPL      |L14.16|
000020  5c0b              LDRB     r3,[r1,r0]
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_BUF_ERR_IS_Msk)   /* clear Buffer Error Interrupt */
000022  6023              STR      r3,[r4,#0]
000024  1c40              ADDS     r0,r0,#1
                  |L14.38|
;;;53         {
;;;54             uart->FSR |= UART_FSR_RX_OVER_F_Msk | UART_FSR_TX_OVER_F_Msk;
000026  4290              CMP      r0,r2
000028  d1f0              BNE      |L14.12|
00002a  bd70              POP      {r4-r6,pc}
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_ISR_WAKE_IS_Msk)   /* clear wake up Interrupt */
;;;58         {
;;;59             uart->ISR |= UART_ISR_WAKE_IS_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_ISR_ABAUD_IS_Msk)   /* clear auto-baud rate Interrupt */
;;;63         {
;;;64             uart->TRSR |= UART_TRSR_ABAUD_TOUT_F_Msk | UART_TRSR_ABAUD_F_Msk;
;;;65         }
;;;66     
;;;67         if(u32InterruptFlag & UART_ISR_LIN_IS_Msk)   /* clear LIN break Interrupt */
;;;68         {
;;;69             uart->TRSR |= UART_TRSR_LIN_TX_F_Msk | UART_TRSR_LIN_RX_F_Msk | UART_TRSR_BIT_ERR_F_Msk;
;;;70         }
;;;71     
;;;72     }
;;;73     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00008000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00b71b00
                          DCD      0x00008000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00b71b00
                          DCD      0x00008000
                          DCD      0x00000000
                          DCD      0x00b71b00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 402
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
