; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  EINT0_IRQHandler PROC
;;;18     
;;;19     void EINT0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21     	#if defined (USE_INT0_PB8)	
;;;22         /* For PB.8, clear the INT flag */
;;;23         PB->ISRC = BIT8;
000002  20ff              MOVS     r0,#0xff
000004  4952              LDR      r1,|L1.336|
000006  3001              ADDS     r0,#1
000008  6208              STR      r0,[r1,#0x20]
;;;24         printf("PB.8 EINT0 occurred. \r\n");
00000a  a052              ADR      r0,|L1.340|
00000c  f7fffffe          BL       __2printf
;;;25     	#elif defined (USE_INT0_PB9)
;;;26         PB->ISRC = BIT9;
;;;27         printf("PB.9 EINT0 occurred. \r\n");
;;;28     	#elif defined (USE_INT0_PB14)
;;;29         PB->ISRC = BIT14;
;;;30         printf("PB.14 EINT0 occurred. \r\n");
;;;31     	#elif defined (USE_INT0_PC12)
;;;32         PC->ISRC = BIT12;
;;;33         printf("PC.12 EINT0 occurred. \r\n");
;;;34     
;;;35     	#endif
;;;36     	
;;;37     }
000010  bd10              POP      {r4,pc}
;;;38     
                          ENDP

                  EINT1_IRQHandler PROC
;;;39     
;;;40     void EINT1_IRQHandler(void)
000012  b510              PUSH     {r4,lr}
;;;41     {
;;;42         /* For PB.15, clear the INT flag */
;;;43         PB->ISRC = BIT15;
000014  2001              MOVS     r0,#1
000016  494e              LDR      r1,|L1.336|
000018  03c0              LSLS     r0,r0,#15
00001a  6208              STR      r0,[r1,#0x20]
;;;44     
;;;45         printf("PB.15 EINT1 occurred. \r\n");
00001c  a053              ADR      r0,|L1.364|
00001e  f7fffffe          BL       __2printf
;;;46     }
000022  bd10              POP      {r4,pc}
;;;47     
                          ENDP

                  UART0_Init PROC
;;;48     
;;;49     void UART0_Init(void)
000024  b510              PUSH     {r4,lr}
;;;50     {
;;;51         SYS_ResetModule(UART0_RST);
000026  4858              LDR      r0,|L1.392|
000028  f7fffffe          BL       SYS_ResetModule
;;;52     
;;;53         /* Configure UART0 and set UART0 baud rate */
;;;54         UART_Open(UART0, 115200);
00002c  21e1              MOVS     r1,#0xe1
00002e  0249              LSLS     r1,r1,#9
000030  4856              LDR      r0,|L1.396|
000032  f7fffffe          BL       UART_Open
;;;55     
;;;56     	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000036  f7fffffe          BL       CLK_GetCPUFreq
00003a  4601              MOV      r1,r0
00003c  a054              ADR      r0,|L1.400|
00003e  f7fffffe          BL       __2printf
;;;57     	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000042  f7fffffe          BL       CLK_GetHXTFreq
000046  4601              MOV      r1,r0
000048  a058              ADR      r0,|L1.428|
00004a  f7fffffe          BL       __2printf
;;;58     	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00004e  f7fffffe          BL       CLK_GetLXTFreq
000052  4601              MOV      r1,r0
000054  a05b              ADR      r0,|L1.452|
000056  f7fffffe          BL       __2printf
;;;59     	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetHCLKFreq());
00005a  f7fffffe          BL       CLK_GetHCLKFreq
00005e  4601              MOV      r1,r0
000060  a05e              ADR      r0,|L1.476|
000062  f7fffffe          BL       __2printf
;;;60     	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPLLClockFreq());
000066  f7fffffe          BL       CLK_GetPLLClockFreq
00006a  4601              MOV      r1,r0
00006c  a062              ADR      r0,|L1.504|
00006e  f7fffffe          BL       __2printf
;;;61     
;;;62     
;;;63     }
000072  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  SYS_Init PROC
;;;65     
;;;66     void SYS_Init(void)
000074  b570              PUSH     {r4-r6,lr}
000076  2159              MOVS     r1,#0x59
000078  2216              MOVS     r2,#0x16
00007a  4c66              LDR      r4,|L1.532|
00007c  2088              MOVS     r0,#0x88
00007e  e002              B        |L1.134|
                  |L1.128|
000080  6021              STR      r1,[r4,#0]
000082  6022              STR      r2,[r4,#0]
000084  6020              STR      r0,[r4,#0]
                  |L1.134|
000086  6823              LDR      r3,[r4,#0]
000088  2b01              CMP      r3,#1
00008a  d1f9              BNE      |L1.128|
;;;67     {
;;;68         /*---------------------------------------------------------------------------------------------------------*/
;;;69         /* Init System Clock                                                                                       */
;;;70         /*---------------------------------------------------------------------------------------------------------*/
;;;71         /* Unlock protected registers */
;;;72         SYS_UnlockReg();
;;;73     
;;;74         /* Set HCLK source form HXT and HCLK source divide 1  */
;;;75         CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HXT,CLK_HCLK_CLK_DIVIDER(1));
00008c  2100              MOVS     r1,#0
00008e  4608              MOV      r0,r1
000090  f7fffffe          BL       CLK_SetHCLK
;;;76     
;;;77         /* Enable external 12MHz HXT, 32KHz LXT and HIRC */
;;;78         CLK_EnableXtalRC(CLK_PWRCTL_HXT_EN_Msk | CLK_PWRCTL_LXT_EN_Msk | CLK_PWRCTL_HIRC_EN_Msk);
000094  2007              MOVS     r0,#7
000096  f7fffffe          BL       CLK_EnableXtalRC
;;;79     
;;;80         /* Waiting for clock ready */
;;;81         CLK_WaitClockReady(CLK_CLKSTATUS_HXT_STB_Msk | CLK_CLKSTATUS_LXT_STB_Msk | CLK_CLKSTATUS_HIRC_STB_Msk);
00009a  2013              MOVS     r0,#0x13
00009c  f7fffffe          BL       CLK_WaitClockReady
;;;82     
;;;83         /*  Set HCLK frequency 42MHz */
;;;84         CLK_SetCoreClock(42000000);
0000a0  485d              LDR      r0,|L1.536|
0000a2  f7fffffe          BL       CLK_SetCoreClock
;;;85     
;;;86         /* Enable IP clock */
;;;87         CLK_EnableModuleClock(UART0_MODULE);
0000a6  4d5d              LDR      r5,|L1.540|
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       CLK_EnableModuleClock
;;;88     
;;;89         /* Select IP clock source */
;;;90         CLK_SetModuleClock(UART0_MODULE,CLK_CLKSEL1_UART_S_HXT,CLK_UART_CLK_DIVIDER(1));
0000ae  2200              MOVS     r2,#0
0000b0  4611              MOV      r1,r2
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       CLK_SetModuleClock
;;;91     
;;;92         /* Update System Core Clock */
;;;93         /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;94         SystemCoreClockUpdate();
0000b8  f7fffffe          BL       SystemCoreClockUpdate
;;;95     
;;;96     
;;;97         /*---------------------------------------------------------------------------------------------------------*/
;;;98         /* Init I/O Multi-function                                                                                 */
;;;99         /*---------------------------------------------------------------------------------------------------------*/
;;;100        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;101        SYS->PB_L_MFP &= ~(SYS_PB_L_MFP_PB0_MFP_Msk | SYS_PB_L_MFP_PB1_MFP_Msk);
0000bc  2005              MOVS     r0,#5
0000be  0700              LSLS     r0,r0,#28
0000c0  6b81              LDR      r1,[r0,#0x38]
0000c2  2277              MOVS     r2,#0x77
0000c4  4391              BICS     r1,r1,r2
0000c6  6381              STR      r1,[r0,#0x38]
;;;102        SYS->PB_L_MFP |= (SYS_PB_L_MFP_PB1_MFP_UART0_TX | SYS_PB_L_MFP_PB0_MFP_UART0_RX);
0000c8  6b81              LDR      r1,[r0,#0x38]
0000ca  2211              MOVS     r2,#0x11
0000cc  4311              ORRS     r1,r1,r2
0000ce  6381              STR      r1,[r0,#0x38]
;;;103    
;;;104    	#if defined (USE_INT0_PB8)	
;;;105        SYS->PB_H_MFP &= ~( SYS_PB_H_MFP_PB8_MFP_Msk );
0000d0  6bc1              LDR      r1,[r0,#0x3c]
0000d2  08c9              LSRS     r1,r1,#3
0000d4  00c9              LSLS     r1,r1,#3
0000d6  63c1              STR      r1,[r0,#0x3c]
;;;106        SYS->PB_H_MFP |= (SYS_PB_H_MFP_PB8_MFP_EXT_INT0);
0000d8  6bc1              LDR      r1,[r0,#0x3c]
0000da  2203              MOVS     r2,#3
0000dc  4311              ORRS     r1,r1,r2
0000de  63c1              STR      r1,[r0,#0x3c]
;;;107    	#elif defined (USE_INT0_PB9)
;;;108        SYS->PB_H_MFP &= ~( SYS_PB_H_MFP_PB9_MFP_Msk );
;;;109        SYS->PB_H_MFP |= (SYS_PB_H_MFP_PB9_MFP_EXT_INT0);
;;;110    	#elif defined (USE_INT0_PB14)
;;;111        SYS->PB_H_MFP &= ~( SYS_PB_H_MFP_PB14_MFP_Msk );
;;;112        SYS->PB_H_MFP |= (SYS_PB_H_MFP_PB14_MFP_EXT_INT0);
;;;113    	#elif defined (USE_INT0_PC12)
;;;114        SYS->PC_H_MFP &= ~( SYS_PC_H_MFP_PC12_MFP_Msk );
;;;115        SYS->PC_H_MFP |= (SYS_PC_H_MFP_PC12_MFP_EXT_INT0);
;;;116    	
;;;117    	#endif
;;;118    
;;;119    	SYS->PB_H_MFP &= ~( SYS_PB_H_MFP_PB15_MFP_Msk );
0000e0  6bc1              LDR      r1,[r0,#0x3c]
0000e2  2207              MOVS     r2,#7
0000e4  0712              LSLS     r2,r2,#28
0000e6  4391              BICS     r1,r1,r2
0000e8  63c1              STR      r1,[r0,#0x3c]
;;;120    	SYS->PB_H_MFP |= (SYS_PB_H_MFP_PB15_MFP_EXT_INT1);
0000ea  6bc1              LDR      r1,[r0,#0x3c]
0000ec  062a              LSLS     r2,r5,#24
0000ee  4311              ORRS     r1,r1,r2
0000f0  63c1              STR      r1,[r0,#0x3c]
0000f2  2000              MOVS     r0,#0
0000f4  6020              STR      r0,[r4,#0]
;;;121    
;;;122    	
;;;123        /* Lock protected registers */
;;;124        SYS_LockReg();
;;;125    }
0000f6  bd70              POP      {r4-r6,pc}
;;;126    
                          ENDP

                  main PROC
;;;128    
;;;129    int main()
0000f8  f7fffffe          BL       SYS_Init
;;;130    {
;;;131    
;;;132        SYS_Init();
;;;133    	
;;;134        /* Init UART to 115200-8n1 for print message */
;;;135    
;;;136    
;;;137    	/*
;;;138    		PB.0 : UART0_RX , PIN44
;;;139    		PB.1 : UART0_TX , PIN45
;;;140    	
;;;141    	*/
;;;142        UART0_Init();
0000fc  f7fffffe          BL       UART0_Init
;;;143    
;;;144    	#if defined (USE_INT0_PB8)	//PIN126
;;;145        GPIO_SetMode(PB, BIT8, GPIO_PMD_INPUT);
000100  26ff              MOVS     r6,#0xff
000102  4c13              LDR      r4,|L1.336|
000104  3601              ADDS     r6,#1
000106  2200              MOVS     r2,#0
000108  4631              MOV      r1,r6
00010a  4620              MOV      r0,r4
00010c  f7fffffe          BL       GPIO_SetMode
;;;146        GPIO_EnableEINT0(PB, 8, GPIO_INT_FALLING);
000110  2201              MOVS     r2,#1
000112  2108              MOVS     r1,#8
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       GPIO_EnableInt
00011a  4d41              LDR      r5,|L1.544|
00011c  2004              MOVS     r0,#4
00011e  6028              STR      r0,[r5,#0]
;;;147    
;;;148    	#elif defined (USE_INT0_PB9)		//PIN64
;;;149        GPIO_SetMode(PB, BIT9, GPIO_PMD_INPUT);
;;;150        GPIO_EnableEINT0(PB, 9, GPIO_INT_FALLING);
;;;151    	#elif defined (USE_INT0_PB14)		//PIN2
;;;152        GPIO_SetMode(PB, BIT14, GPIO_PMD_INPUT);
;;;153        GPIO_EnableEINT0(PB, 14, GPIO_INT_FALLING);
;;;154    	#elif defined (USE_INT0_PC12)		//PIN71
;;;155        GPIO_SetMode(PC, BIT12, GPIO_PMD_INPUT);
;;;156        GPIO_EnableEINT0(PC, 12, GPIO_INT_FALLING);
;;;157    	
;;;158    	#endif
;;;159    	
;;;160        NVIC_EnableIRQ(EINT0_IRQn);
;;;161    
;;;162    	//PIN111
;;;163        GPIO_SetMode(PB, BIT15, GPIO_PMD_INPUT);
000120  0347              LSLS     r7,r0,#13
000122  2200              MOVS     r2,#0
000124  4639              MOV      r1,r7
000126  4620              MOV      r0,r4
000128  f7fffffe          BL       GPIO_SetMode
;;;164        GPIO_EnableEINT1(PB, 15, GPIO_INT_FALLING);
00012c  2201              MOVS     r2,#1
00012e  210f              MOVS     r1,#0xf
000130  4620              MOV      r0,r4
000132  f7fffffe          BL       GPIO_EnableInt
000136  2008              MOVS     r0,#8
000138  6028              STR      r0,[r5,#0]
;;;165        NVIC_EnableIRQ(EINT1_IRQn);
;;;166    
;;;167        GPIO_SET_DEBOUNCE_TIME(GPIO_DBCLKSRC_HCLK, GPIO_DBCLKSEL_1);
00013a  493a              LDR      r1,|L1.548|
00013c  2020              MOVS     r0,#0x20
00013e  6008              STR      r0,[r1,#0]
;;;168    
;;;169    	#if defined (USE_INT0_PB8)	
;;;170        GPIO_ENABLE_DEBOUNCE(PB, BIT8);
000140  6960              LDR      r0,[r4,#0x14]
000142  4330              ORRS     r0,r0,r6
000144  6160              STR      r0,[r4,#0x14]
;;;171    	#elif defined (USE_INT0_PB9)
;;;172        GPIO_ENABLE_DEBOUNCE(PB, BIT9);
;;;173    	#elif defined (USE_INT0_PB14)
;;;174        GPIO_ENABLE_DEBOUNCE(PB, BIT14);
;;;175    	#elif defined (USE_INT0_PC12)
;;;176        GPIO_ENABLE_DEBOUNCE(PC, BIT12);
;;;177    	
;;;178    	#endif
;;;179        GPIO_ENABLE_DEBOUNCE(PB, BIT15);
000146  6960              LDR      r0,[r4,#0x14]
000148  4338              ORRS     r0,r0,r7
00014a  6160              STR      r0,[r4,#0x14]
                  |L1.332|
;;;180    
;;;181    
;;;182        while(1);
00014c  e7fe              B        |L1.332|
;;;183    
;;;184    }
;;;185    
                          ENDP

00014e  0000              DCW      0x0000
                  |L1.336|
                          DCD      0x50004040
                  |L1.340|
000154  50422e38          DCB      "PB.8 EINT0 occurred. \r\n",0
000158  2045494e
00015c  5430206f
000160  63637572
000164  7265642e
000168  200d0a00
                  |L1.364|
00016c  50422e31          DCB      "PB.15 EINT1 occurred. \r\n",0
000170  35204549
000174  4e543120
000178  6f636375
00017c  72726564
000180  2e200d0a
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L1.392|
                          DCD      0x04000010
                  |L1.396|
                          DCD      0x40050000
                  |L1.400|
000190  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000194  4b5f4765
000198  74435055
00019c  46726571
0001a0  203a2025
0001a4  38640d0a
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L1.428|
0001ac  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0001b0  47657448
0001b4  58544672
0001b8  6571203a
0001bc  20253864
0001c0  0d0a00  
0001c3  00                DCB      0
                  |L1.452|
0001c4  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0001c8  4765744c
0001cc  58544672
0001d0  6571203a
0001d4  20253864
0001d8  0d0a00  
0001db  00                DCB      0
                  |L1.476|
0001dc  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0001e0  47657450
0001e4  434c4b30
0001e8  46726571
0001ec  203a2025
0001f0  38640d0a
0001f4  00      
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L1.504|
0001f8  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0001fc  47657450
000200  434c4b31
000204  46726571
000208  203a2025
00020c  38640d0a
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L1.532|
                          DCD      0x50000100
                  |L1.536|
                          DCD      0x0280de80
                  |L1.540|
                          DCD      0xa6003d10
                  |L1.544|
                          DCD      0xe000e100
                  |L1.548|
                          DCD      0x50004180

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_deaaa936____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_deaaa936____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_deaaa936____REVSH|
#line 402
|__asm___6_main_c_deaaa936____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
